
#include <query_processing/column_algebra.hpp>
#include <util/hardware_detector.hpp>

namespace CoGaDB
{
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::Map_Init_Function ColumnWise_Map_Init_Function;
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::Physical_Operator_Map ColumnWise_Physical_Operator_Map;
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::Physical_Operator_Map_Ptr ColumnWise_Physical_Operator_Map_Ptr;
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::TypedOperatorPtr ColumnWise_TypedOperatorPtr;
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::TypedLogicalNode ColumnWise_TypedLogicalNode;
//		typedef hype::queryprocessing::OperatorMapper_Helper_Template<ColumnPtr>::PhysicalQueryPlanPtr ColumnWise_PhysicalQueryPlanPtr;
//		
//		typedef hype::queryprocessing::LogicalQueryPlan<ColumnPtr> ColumnWise_LogicalQueryPlan;
namespace query_processing{

//Map_Init_Function init_function_Selection_operator=physical_operator::map_init_function_Selection_operator;

	namespace physical_operator{

//			ColumnWise_TypedOperatorPtr create_CPU_ColumnAlgebraOperator(ColumnWise_TypedLogicalNode& logical_node, const hype::SchedulingDecision&, ColumnWise_TypedOperatorPtr left_child, ColumnWise_TypedOperatorPtr right_child);			
//			ColumnWise_TypedOperatorPtr create_GPU_ColumnAlgebraOperator(ColumnWise_TypedLogicalNode& logical_node, const hype::SchedulingDecision&, ColumnWise_TypedOperatorPtr left_child, ColumnWise_TypedOperatorPtr right_child);


ColumnWise_TypedOperatorPtr create_CPU_ColumnAlgebraOperator(ColumnWise_TypedLogicalNode& logical_node, const hype::SchedulingDecision& sched_dec, ColumnWise_TypedOperatorPtr left_child, ColumnWise_TypedOperatorPtr right_child)
	{
		logical_operator::Logical_ColumnAlgebraOperation& log_algebra_ref = static_cast<logical_operator::Logical_ColumnAlgebraOperation&>(logical_node);
		std::cout << "create CPU_Columnalgebra_Operator!" << std::endl;
		if(!left_child) {
			std::cout << "Error!" << std::endl;
			exit(-1);
		}
		

		
		assert(right_child!=NULL); //binary operator
		return ColumnWise_TypedOperatorPtr(new CPU_ColumnAlgebraOperation(sched_dec,
		                        left_child, 
										right_child,
		                        log_algebra_ref.getColumnAlgebraOperation()
		                        log_algebra_ref.getMaterializationStatus()) );
	}
	
//dass sind GPU Columns!!!!!!!!!! -> funktioniert so nicht!!!!!
ColumnWise_TypedOperatorPtr create_GPU_ColumnAlgebraOperator(ColumnWise_TypedLogicalNode& logical_node, const hype::SchedulingDecision&, ColumnWise_TypedOperatorPtr left_child, ColumnWise_TypedOperatorPtr right_child)
	{
		logical_operator::Logical_ColumnAlgebraOperation& log_algebra_ref = static_cast<logical_operator::Logical_ColumnAlgebraOperation&>(logical_node);
		std::cout << "create CPU_Columnalgebra_Operator!" << std::endl;
		if(!left_child) {
			std::cout << "Error!" << std::endl;
			exit(-1);
		}
		

		
		assert(right_child!=NULL); //binary operator
		return ColumnWise_TypedOperatorPtr(new GPU_ColumnAlgebraOperation(sched_dec,
		                        left_child, 
										right_child,
		                        log_algebra_ref.getColumnAlgebraOperation()
		                        log_algebra_ref.getMaterializationStatus()) );
	}

	ColumnWise_Physical_Operator_Map_Ptr map_init_function_column_algebra_operator()
	{
		//std::cout << sd.getNameofChoosenAlgorithm() << std::endl;
		ColumnWise_Physical_Operator_Map map;
		std::cout << "calling map init function for JOIN operator!" << std::endl;
		//hype::Scheduler::instance().addAlgorithm("JOIN","CPU_NestedLoopJoin_Algorithm",hype::CPU,"Least Squares 2D","Periodic Recomputation");
		//stemod::Scheduler::instance().addAlgorithm("JOIN","CPU_SortMergeJoin_Algorithm",stemod::CPU,"Least Squares 2D","Periodic Recomputation");
		//hype::Scheduler::instance().addAlgorithm("JOIN","CPU_HashJoin_Algorithm",hype::CPU,"Least Squares 2D","Periodic Recomputation");		
		
		
		hype::AlgorithmSpecification join_alg_spec_cpu_nlj("CPU_NestedLoopJoin_Algorithm",
															"JOIN",
															hype::StatisticalMethods::Multilinear_Fitting_2D,
															hype::RecomputationHeuristics::Periodic);	
	
		hype::AlgorithmSpecification join_alg_spec_cpu_hashjoin("CPU_HashJoin_Algorithm",
																	"JOIN",
																	hype::StatisticalMethods::Multilinear_Fitting_2D,
																	hype::RecomputationHeuristics::Periodic);																		
																	

		//addAlgorithmSpecificationToHardware();
		
		const DeviceSpecifications& dev_specs = HardwareDetector::instance().getDeviceSpecifications();
		
		for(unsigned int i=0;i<dev_specs.size();++i){
			if(dev_specs[i].getDeviceType()==hype::CPU){
				hype::Scheduler::instance().addAlgorithm(join_alg_spec_cpu_nlj,dev_specs[i]);
				hype::Scheduler::instance().addAlgorithm(join_alg_spec_cpu_hashjoin,dev_specs[i]);				
			}else if(dev_specs[i].getDeviceType()==hype::GPU){
				//hype::Scheduler::instance().addAlgorithm(group_by_alg_spec_gpu,dev_specs[i]);			
			}
		}
		
		
		
		//stemod::Scheduler::instance().addAlgorithm("SELECTION","GPU_Selection_Algorithm",stemod::GPU,"Least Squares 1D","Periodic Recomputation");
		map["CPU_ColumnAlgebra_Operator"]=create_CPU_NestedLoopJoin_Operator;
		//map["CPU_SortMergeJoin_Algorithm"]=create_CPU_SortMergeJoin_Operator;
		map["GPU_ColumnAlgebra_Operator"]=create_CPU_HashJoin_Operator;		
		//map["GPU_Selection_Algorithm"]=create_GPU_Selection_Operator;
		return ColumnWise_Physical_Operator_Map_Ptr(new ColumnWise_Physical_Operator_Map(map));
	}

	}//end namespace physical_operator

}//end namespace query_processing

}; //end namespace CogaDB
