//DECL
%baseclass-preinclude   cmath
%stype double

%token NUM
%left '-' '+'
%left '*' '/'
%left NEG     // negation--unary minus 
%right '^'    // exponentiation        

%%

input:    
        // empty 
| 
        input line
;

line:   
        '\n'
| 
        exp '\n'  
        { 
            std::cout << "\t" << $1 << '\n';
        }
;

exp:      
        NUM             
| 
        exp '+' exp 
        { 
				std::cout << "Create Node: ADD(" << std::endl;
            $$ = $1 + $3;
        }
| 
        exp '-' exp 
        { 
				std::cout << "Create Node: MINUS(" << std::endl;
            $$ = $1 - $3;
        }
| 
        exp '*' exp 
        { 
				std::cout << "Create Node: MUL(" << std::endl;
            $$ = $1 * $3;
        }
| 
        exp '/' exp 
        { 
				std::cout << "Create Node: DIV(" << std::endl;
            $$ = $1 / $3;
        }
| 
        '-' exp %prec NEG
        { 
            $$ = -$2;
        }
|
        // Exponentiation:
        exp '^' exp 
        { 
            $$ = pow($1, $3);
        }
|
        '(' exp ')'
        { 
            $$ = $2;
        }
;
//=
